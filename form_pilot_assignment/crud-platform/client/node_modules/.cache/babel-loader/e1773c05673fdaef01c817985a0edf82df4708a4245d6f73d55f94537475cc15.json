{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Downloads\\\\form_pilot_assignment\\\\crud-platform\\\\client\\\\src\\\\components\\\\Login.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Card, Container, Row, Col, Alert } from 'react-bootstrap';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GOOGLE_CLIENT_ID = \"300345994388-bh0uv0j2bvi7nfh7vurl116lkktb4uup.apps.googleusercontent.com\";\nconst Login = () => {\n  _s();\n  const {\n    login,\n    user,\n    loading,\n    error\n  } = useAuth();\n  const navigate = useNavigate();\n  const [authError, setAuthError] = useState(null);\n  useEffect(() => {\n    // Redirect to dashboard if already logged in\n    if (user) {\n      navigate('/dashboard');\n    }\n\n    // Load Google's authentication script\n    const loadGoogleScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://accounts.google.com/gsi/client';\n      script.async = true;\n      script.defer = true;\n      document.body.appendChild(script);\n      script.onload = () => {\n        initializeGoogleAuth();\n      };\n    };\n    loadGoogleScript();\n  }, [user, navigate]);\n  const initializeGoogleAuth = () => {\n    if (window.google && GOOGLE_CLIENT_ID) {\n      try {\n        window.google.accounts.id.initialize({\n          client_id: GOOGLE_CLIENT_ID,\n          callback: handleGoogleResponse,\n          auto_select: false,\n          cancel_on_tap_outside: true\n        });\n        window.google.accounts.id.renderButton(document.getElementById(\"google-signin-button\"), {\n          theme: \"outline\",\n          size: \"large\",\n          width: 280,\n          text: \"signin_with\"\n        });\n      } catch (error) {\n        console.error('Failed to initialize Google auth:', error);\n        setAuthError('Failed to initialize authentication. Please try again.');\n      }\n    }\n  };\n  const handleGoogleResponse = async response => {\n    try {\n      // In a real application, you would validate this token on your backend\n      if (response.credential) {\n        // For demo purposes, we're just using the credential token directly\n        await login(response.credential);\n        navigate('/dashboard');\n      } else {\n        setAuthError('Authentication failed. Please try again.');\n      }\n    } catch (err) {\n      console.error('Login failed:', err);\n      setAuthError('Authentication failed. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center mt-5\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: \"shadow-sm\",\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            className: \"p-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"text-center mb-4\",\n              children: \"Sign In\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this), authError && /*#__PURE__*/_jsxDEV(Alert, {\n              variant: \"danger\",\n              children: authError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"mb-4\",\n                children: \"Sign in with your Google account to access the CRUD API Platform.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"google-signin-button\",\n                className: \"d-inline-block mb-3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-muted small mt-4\",\n                children: \"By signing in, you agree to our Terms of Service and Privacy Policy.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n// Add TypeScript interface for Google auth\n_s(Login, \"Ig2opZu8c3PvEIw7Njmo9Gzj5F8=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Card","Container","Row","Col","Alert","useAuth","jsxDEV","_jsxDEV","GOOGLE_CLIENT_ID","Login","_s","login","user","loading","error","navigate","authError","setAuthError","loadGoogleScript","script","document","createElement","src","async","defer","body","appendChild","onload","initializeGoogleAuth","window","google","accounts","id","initialize","client_id","callback","handleGoogleResponse","auto_select","cancel_on_tap_outside","renderButton","getElementById","theme","size","width","text","console","response","credential","err","children","className","md","Body","fileName","_jsxFileName","lineNumber","columnNumber","variant","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Downloads/form_pilot_assignment/crud-platform/client/src/components/Login.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Card, Button, Container, Row, Col, Alert } from 'react-bootstrap';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nconst GOOGLE_CLIENT_ID = \"300345994388-bh0uv0j2bvi7nfh7vurl116lkktb4uup.apps.googleusercontent.com\";\r\n\r\nconst Login: React.FC = () => {\r\n  const { login, user, loading, error } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [authError, setAuthError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Redirect to dashboard if already logged in\r\n    if (user) {\r\n      navigate('/dashboard');\r\n    }\r\n\r\n    // Load Google's authentication script\r\n    const loadGoogleScript = () => {\r\n      const script = document.createElement('script');\r\n      script.src = 'https://accounts.google.com/gsi/client';\r\n      script.async = true;\r\n      script.defer = true;\r\n      document.body.appendChild(script);\r\n\r\n      script.onload = () => {\r\n        initializeGoogleAuth();\r\n      };\r\n    };\r\n\r\n    loadGoogleScript();\r\n  }, [user, navigate]);\r\n\r\n  const initializeGoogleAuth = () => {\r\n    if (window.google && GOOGLE_CLIENT_ID) {\r\n      try {\r\n        window.google.accounts.id.initialize({\r\n          client_id: GOOGLE_CLIENT_ID,\r\n          callback: handleGoogleResponse,\r\n          auto_select: false,\r\n          cancel_on_tap_outside: true,\r\n        });\r\n        \r\n        window.google.accounts.id.renderButton(\r\n          document.getElementById(\"google-signin-button\")!,\r\n          { \r\n            theme: \"outline\", \r\n            size: \"large\",\r\n            width: 280,\r\n            text: \"signin_with\"\r\n          }\r\n        );\r\n      } catch (error) {\r\n        console.error('Failed to initialize Google auth:', error);\r\n        setAuthError('Failed to initialize authentication. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleGoogleResponse = async (response: any) => {\r\n    try {\r\n      // In a real application, you would validate this token on your backend\r\n      if (response.credential) {\r\n        // For demo purposes, we're just using the credential token directly\r\n        await login(response.credential);\r\n        navigate('/dashboard');\r\n      } else {\r\n        setAuthError('Authentication failed. Please try again.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Login failed:', err);\r\n      setAuthError('Authentication failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-center mt-5\">\r\n        <Col md={6}>\r\n          <Card className=\"shadow-sm\">\r\n            <Card.Body className=\"p-5\">\r\n              <h1 className=\"text-center mb-4\">Sign In</h1>\r\n              \r\n              {authError && (\r\n                <Alert variant=\"danger\">{authError}</Alert>\r\n              )}\r\n              \r\n              <div className=\"text-center\">\r\n                <p className=\"mb-4\">Sign in with your Google account to access the CRUD API Platform.</p>\r\n                \r\n                <div id=\"google-signin-button\" className=\"d-inline-block mb-3\"></div>\r\n                \r\n                <p className=\"text-muted small mt-4\">\r\n                  By signing in, you agree to our Terms of Service and Privacy Policy.\r\n                </p>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\n// Add TypeScript interface for Google auth\r\ndeclare global {\r\n  interface Window {\r\n    google: {\r\n      accounts: {\r\n        id: {\r\n          initialize: (config: any) => void;\r\n          renderButton: (element: HTMLElement, options: any) => void;\r\n          prompt: () => void;\r\n        };\r\n      };\r\n    };\r\n  }\r\n}\r\n\r\nexport default Login; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}