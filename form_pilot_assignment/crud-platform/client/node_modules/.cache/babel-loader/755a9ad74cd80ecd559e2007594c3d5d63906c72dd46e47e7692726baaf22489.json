{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Downloads\\\\form_pilot_assignment\\\\crud-platform\\\\client\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport CrudLibrary from 'your-formpilot-crud';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (token && userData) {\n      try {\n        setUser(JSON.parse(userData));\n      } catch (error) {\n        console.error('Failed to parse user data:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Send API credentials via email\n  const sendCredentialsEmail = async (userEmail, apiKey, apiUrl, userName) => {\n    try {\n      // Create a well-formatted email subject and body\n      const formattedDate = new Date().toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n      const subject = encodeURIComponent(`Your CRUD API Credentials (${formattedDate})`);\n      const body = encodeURIComponent(`Dear ${userName},\n\nHere are your CRUD API credentials:\n\nAPI URL: ${apiUrl}\nAPI Key: ${apiKey}\nInitial Credits: 4\n\nTo use these credentials in your code:\n\n// JavaScript example:\nprocess.env.CRUD_API_URL = '${apiUrl}';\nprocess.env.CRUD_API_KEY = '${apiKey}';\n\n// Or in a .env file:\nCRUD_API_URL=${apiUrl}\nCRUD_API_KEY=${apiKey}\n\nThank you for using our service!\n\nRegards,\nCRUD API Platform Team`);\n\n      // For real-world application, you'd make an API call to your backend here\n      // to send the email server-side\n\n      // For demonstration, we'll use mailto: link\n      window.location.href = `mailto:${userEmail}?subject=${subject}&body=${body}`;\n\n      // Log credentials for development purposes\n      console.log(\"----------- YOUR API CREDENTIALS -----------\");\n      console.log(`Email: ${userEmail}`);\n      console.log(`API URL: ${apiUrl}`);\n      console.log(`API Key: ${apiKey}`);\n      console.log(`Initial Credits: 4`);\n      console.log(\"-------------------------------------------\");\n      toast.success(`API credentials sent to your email: ${userEmail}`);\n\n      // Option for real-world implementation:\n      // Uncomment and modify this to use a real email service\n      /*\n      try {\n        // Use EmailJS or similar service to send email from client-side\n        const response = await emailjs.send(\n          'YOUR_SERVICE_ID',\n          'YOUR_TEMPLATE_ID',\n          {\n            to_email: userEmail,\n            user_name: userName,\n            api_key: apiKey,\n            api_url: apiUrl,\n            credits: 4\n          },\n          'YOUR_PUBLIC_KEY'\n        );\n        \n        console.log('Email sent:', response);\n        toast.success(`API credentials sent to your email: ${userEmail}`);\n      } catch (emailError) {\n        console.error('Error sending email:', emailError);\n        toast.error('Failed to send email. You can find your credentials in the dashboard.');\n      }\n      */\n    } catch (error) {\n      console.error('Failed to send credentials email:', error);\n      toast.error('Failed to send credentials email. Please check your dashboard for API details.');\n    }\n  };\n  const login = async token => {\n    try {\n      // Decode the Google JWT token to get user info\n      // JWT tokens are in format: header.payload.signature\n      const payload = token.split('.')[1];\n      const decodedPayload = JSON.parse(atob(payload));\n\n      // Generate a unique API key\n      const uniqueApiKey = `key_${Math.random().toString(36).substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}`;\n      const apiUrl = `${window.location.origin}/api`;\n\n      // Extract user information from the token\n      const userData = {\n        id: decodedPayload.sub,\n        name: decodedPayload.name || decodedPayload.email.split('@')[0],\n        email: decodedPayload.email,\n        credits: 4,\n        // Start with 4 credits\n        apiKey: uniqueApiKey,\n        apiUrl: apiUrl,\n        isRecharged: false\n      };\n\n      // Save user data\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(userData));\n      setUser(userData);\n\n      // Send credentials email automatically after signup\n      await sendCredentialsEmail(userData.email, uniqueApiKey, apiUrl, userData.name);\n      toast.success('Logged in successfully!');\n\n      // Create a sample item to demonstrate the library\n      try {\n        // Use directly after user logs in - using a setTimeout to avoid blocking\n        setTimeout(() => {\n          // Cast to any to avoid TypeScript errors as we know the structure\n          const createFn = CrudLibrary.create;\n          if (typeof createFn === 'function') {\n            createFn({\n              value: 0.5,\n              txHash: \"123\"\n            }).then(result => {\n              console.log(\"Created test item:\", result);\n            }).catch(err => {\n              console.error(\"Error in test item promise:\", err);\n            });\n          }\n        }, 500);\n      } catch (e) {\n        console.error(\"Error setting up test item creation:\", e);\n      }\n    } catch (error) {\n      console.error('Error parsing JWT token:', error);\n      toast.error('Login failed. Please try again.');\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    toast.info('Logged out successfully');\n\n    // Force navigate to home page\n    window.location.href = '/';\n  };\n  const refreshUser = () => {\n    // Mock implementation - in a real app this would fetch updated user data\n    if (user) {\n      const updatedUser = {\n        ...user\n      };\n      setUser(updatedUser);\n    }\n  };\n  const refreshCredits = () => {\n    // Mock implementation - in a real app this would refresh credits count\n    if (user) {\n      const updatedUser = {\n        ...user,\n        credits: 100\n      };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      setUser(updatedUser);\n      toast.success('Credits refreshed successfully!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      error,\n      isAuthenticated: !!user,\n      login,\n      logout,\n      refreshUser,\n      refreshCredits,\n      sendCredentialsEmail\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","toast","CrudLibrary","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","token","localStorage","getItem","userData","JSON","parse","console","removeItem","sendCredentialsEmail","userEmail","apiKey","apiUrl","userName","formattedDate","Date","toLocaleDateString","year","month","day","subject","encodeURIComponent","body","window","location","href","log","success","login","payload","split","decodedPayload","atob","uniqueApiKey","Math","random","toString","substring","origin","id","sub","name","email","credits","isRecharged","setItem","stringify","setTimeout","createFn","create","value","txHash","then","result","catch","err","e","logout","info","refreshUser","updatedUser","refreshCredits","Provider","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Downloads/form_pilot_assignment/crud-platform/client/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\nimport CrudLibrary from 'your-formpilot-crud';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  credits: number;\n  apiKey: string;\n  apiUrl: string;\n  isRecharged: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  error: string | null;\n  isAuthenticated: boolean;\n  login: (token: string) => void;\n  logout: () => void;\n  refreshUser: () => void;\n  refreshCredits: () => void;\n  sendCredentialsEmail: (userEmail: string, apiKey: string, apiUrl: string, userName: string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    \n    if (token && userData) {\n      try {\n        setUser(JSON.parse(userData));\n      } catch (error) {\n        console.error('Failed to parse user data:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    }\n    \n    setLoading(false);\n  }, []);\n\n  // Send API credentials via email\n  const sendCredentialsEmail = async (userEmail: string, apiKey: string, apiUrl: string, userName: string) => {\n    try {\n      // Create a well-formatted email subject and body\n      const formattedDate = new Date().toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n      \n      const subject = encodeURIComponent(`Your CRUD API Credentials (${formattedDate})`);\n      \n      const body = encodeURIComponent(`Dear ${userName},\n\nHere are your CRUD API credentials:\n\nAPI URL: ${apiUrl}\nAPI Key: ${apiKey}\nInitial Credits: 4\n\nTo use these credentials in your code:\n\n// JavaScript example:\nprocess.env.CRUD_API_URL = '${apiUrl}';\nprocess.env.CRUD_API_KEY = '${apiKey}';\n\n// Or in a .env file:\nCRUD_API_URL=${apiUrl}\nCRUD_API_KEY=${apiKey}\n\nThank you for using our service!\n\nRegards,\nCRUD API Platform Team`);\n\n      // For real-world application, you'd make an API call to your backend here\n      // to send the email server-side\n      \n      // For demonstration, we'll use mailto: link\n      window.location.href = `mailto:${userEmail}?subject=${subject}&body=${body}`;\n      \n      // Log credentials for development purposes\n      console.log(\"----------- YOUR API CREDENTIALS -----------\");\n      console.log(`Email: ${userEmail}`);\n      console.log(`API URL: ${apiUrl}`);\n      console.log(`API Key: ${apiKey}`);\n      console.log(`Initial Credits: 4`);\n      console.log(\"-------------------------------------------\");\n\n      toast.success(`API credentials sent to your email: ${userEmail}`);\n      \n      // Option for real-world implementation:\n      // Uncomment and modify this to use a real email service\n      /*\n      try {\n        // Use EmailJS or similar service to send email from client-side\n        const response = await emailjs.send(\n          'YOUR_SERVICE_ID',\n          'YOUR_TEMPLATE_ID',\n          {\n            to_email: userEmail,\n            user_name: userName,\n            api_key: apiKey,\n            api_url: apiUrl,\n            credits: 4\n          },\n          'YOUR_PUBLIC_KEY'\n        );\n        \n        console.log('Email sent:', response);\n        toast.success(`API credentials sent to your email: ${userEmail}`);\n      } catch (emailError) {\n        console.error('Error sending email:', emailError);\n        toast.error('Failed to send email. You can find your credentials in the dashboard.');\n      }\n      */\n    } catch (error) {\n      console.error('Failed to send credentials email:', error);\n      toast.error('Failed to send credentials email. Please check your dashboard for API details.');\n    }\n  };\n\n  const login = async (token: string) => {\n    try {\n      // Decode the Google JWT token to get user info\n      // JWT tokens are in format: header.payload.signature\n      const payload = token.split('.')[1];\n      const decodedPayload = JSON.parse(atob(payload));\n      \n      // Generate a unique API key\n      const uniqueApiKey = `key_${Math.random().toString(36).substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}`;\n      const apiUrl = `${window.location.origin}/api`;\n      \n      // Extract user information from the token\n      const userData: User = {\n        id: decodedPayload.sub,\n        name: decodedPayload.name || decodedPayload.email.split('@')[0],\n        email: decodedPayload.email,\n        credits: 4, // Start with 4 credits\n        apiKey: uniqueApiKey,\n        apiUrl: apiUrl,\n        isRecharged: false\n      };\n\n      // Save user data\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(userData));\n      setUser(userData);\n      \n      // Send credentials email automatically after signup\n      await sendCredentialsEmail(userData.email, uniqueApiKey, apiUrl, userData.name);\n      \n      toast.success('Logged in successfully!');\n\n      // Create a sample item to demonstrate the library\n      try {\n        // Use directly after user logs in - using a setTimeout to avoid blocking\n        setTimeout(() => {\n          // Cast to any to avoid TypeScript errors as we know the structure\n          const createFn = (CrudLibrary as any).create;\n          if (typeof createFn === 'function') {\n            createFn({ value: 0.5, txHash: \"123\" })\n              .then((result: any) => {\n                console.log(\"Created test item:\", result);\n              })\n              .catch((err: Error) => {\n                console.error(\"Error in test item promise:\", err);\n              });\n          }\n        }, 500);\n      } catch (e) {\n        console.error(\"Error setting up test item creation:\", e);\n      }\n    } catch (error) {\n      console.error('Error parsing JWT token:', error);\n      toast.error('Login failed. Please try again.');\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    toast.info('Logged out successfully');\n    \n    // Force navigate to home page\n    window.location.href = '/';\n  };\n\n  const refreshUser = () => {\n    // Mock implementation - in a real app this would fetch updated user data\n    if (user) {\n      const updatedUser = { ...user };\n      setUser(updatedUser);\n    }\n  };\n\n  const refreshCredits = () => {\n    // Mock implementation - in a real app this would refresh credits count\n    if (user) {\n      const updatedUser = { ...user, credits: 100 };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      setUser(updatedUser);\n      toast.success('Credits refreshed successfully!');\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      user, \n      loading,\n      error,\n      isAuthenticated: !!user, \n      login, \n      logout,\n      refreshUser,\n      refreshCredits,\n      sendCredentialsEmail\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}