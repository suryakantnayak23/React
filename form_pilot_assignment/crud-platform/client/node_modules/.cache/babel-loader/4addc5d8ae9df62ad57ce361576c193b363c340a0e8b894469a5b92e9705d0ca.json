{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Downloads\\\\form_pilot_assignment\\\\crud-platform\\\\client\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (token && userData) {\n      try {\n        setUser(JSON.parse(userData));\n      } catch (error) {\n        console.error('Failed to parse user data:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Send API credentials to user's email\n  const sendCredentialsEmail = async (userEmail, apiKey, apiUrl) => {\n    try {\n      // In a real app, this would be an API call to your backend\n      // For this demo, we'll simulate success after a delay\n      toast.info(`Sending credentials to ${userEmail}...`);\n\n      // Simulate API call with delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Simulate success\n      toast.success(`API credentials sent to ${userEmail}`);\n      console.log(`Credentials email sent to: ${userEmail}`);\n      console.log(`API URL: ${apiUrl}`);\n      console.log(`API Key: ${apiKey}`);\n      console.log(`Initial Credits: 4`);\n\n      // In a real implementation, you would have a backend API like:\n      /*\r\n      await axios.post('/api/send-credentials', {\r\n        email: userEmail,\r\n        apiKey: apiKey,\r\n        apiUrl: apiUrl,\r\n        credits: 4\r\n      });\r\n      */\n    } catch (error) {\n      console.error('Failed to send credentials email:', error);\n      toast.error('Failed to send credentials email. Please check your dashboard for API details.');\n    }\n  };\n  const login = token => {\n    try {\n      // Decode the Google JWT token to get user info\n      // JWT tokens are in format: header.payload.signature\n      const payload = token.split('.')[1];\n      const decodedPayload = JSON.parse(atob(payload));\n\n      // Generate a unique API key\n      const uniqueApiKey = `key_${Math.random().toString(36).substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}`;\n      const apiUrl = `${window.location.origin}/api`;\n\n      // Extract user information from the token\n      const userData = {\n        id: decodedPayload.sub,\n        name: decodedPayload.name || decodedPayload.email.split('@')[0],\n        email: decodedPayload.email,\n        credits: 4,\n        // Start with 4 credits\n        apiKey: uniqueApiKey,\n        apiUrl: apiUrl,\n        isRecharged: false\n      };\n\n      // Save user data\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(userData));\n      setUser(userData);\n\n      // Send welcome email with API credentials\n      sendCredentialsEmail(userData.email, uniqueApiKey, apiUrl);\n      toast.success('Logged in successfully!');\n    } catch (error) {\n      console.error('Error parsing JWT token:', error);\n      // Fallback to mock data if token parsing fails\n      const mockUserData = {\n        id: '123456',\n        name: 'Test User',\n        email: 'test@example.com',\n        credits: 4,\n        apiKey: 'sample-api-key-for-testing',\n        apiUrl: `${window.location.origin}/api`,\n        isRecharged: false\n      };\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(mockUserData));\n      setUser(mockUserData);\n      toast.success('Logged in successfully!');\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    toast.info('Logged out successfully');\n  };\n  const refreshUser = () => {\n    // Mock implementation - in a real app this would fetch updated user data\n    if (user) {\n      const updatedUser = {\n        ...user\n      };\n      setUser(updatedUser);\n    }\n  };\n  const refreshCredits = () => {\n    // Mock implementation - in a real app this would refresh credits count\n    if (user) {\n      const updatedUser = {\n        ...user,\n        credits: 100\n      };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      setUser(updatedUser);\n      toast.success('Credits refreshed successfully!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      error,\n      isAuthenticated: !!user,\n      login,\n      logout,\n      refreshUser,\n      refreshCredits\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","toast","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","token","localStorage","getItem","userData","JSON","parse","console","removeItem","sendCredentialsEmail","userEmail","apiKey","apiUrl","info","Promise","resolve","setTimeout","success","log","login","payload","split","decodedPayload","atob","uniqueApiKey","Math","random","toString","substring","window","location","origin","id","sub","name","email","credits","isRecharged","setItem","stringify","mockUserData","logout","refreshUser","updatedUser","refreshCredits","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Downloads/form_pilot_assignment/crud-platform/client/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport axios from 'axios';\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  credits: number;\r\n  apiKey: string;\r\n  apiUrl: string;\r\n  isRecharged: boolean;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  isAuthenticated: boolean;\r\n  login: (token: string) => void;\r\n  logout: () => void;\r\n  refreshUser: () => void;\r\n  refreshCredits: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in from localStorage\r\n    const token = localStorage.getItem('token');\r\n    const userData = localStorage.getItem('user');\r\n    \r\n    if (token && userData) {\r\n      try {\r\n        setUser(JSON.parse(userData));\r\n      } catch (error) {\r\n        console.error('Failed to parse user data:', error);\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    \r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Send API credentials to user's email\r\n  const sendCredentialsEmail = async (userEmail: string, apiKey: string, apiUrl: string) => {\r\n    try {\r\n      // In a real app, this would be an API call to your backend\r\n      // For this demo, we'll simulate success after a delay\r\n      toast.info(`Sending credentials to ${userEmail}...`);\r\n      \r\n      // Simulate API call with delay\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      // Simulate success\r\n      toast.success(`API credentials sent to ${userEmail}`);\r\n      console.log(`Credentials email sent to: ${userEmail}`);\r\n      console.log(`API URL: ${apiUrl}`);\r\n      console.log(`API Key: ${apiKey}`);\r\n      console.log(`Initial Credits: 4`);\r\n      \r\n      // In a real implementation, you would have a backend API like:\r\n      /*\r\n      await axios.post('/api/send-credentials', {\r\n        email: userEmail,\r\n        apiKey: apiKey,\r\n        apiUrl: apiUrl,\r\n        credits: 4\r\n      });\r\n      */\r\n    } catch (error) {\r\n      console.error('Failed to send credentials email:', error);\r\n      toast.error('Failed to send credentials email. Please check your dashboard for API details.');\r\n    }\r\n  };\r\n\r\n  const login = (token: string) => {\r\n    try {\r\n      // Decode the Google JWT token to get user info\r\n      // JWT tokens are in format: header.payload.signature\r\n      const payload = token.split('.')[1];\r\n      const decodedPayload = JSON.parse(atob(payload));\r\n      \r\n      // Generate a unique API key\r\n      const uniqueApiKey = `key_${Math.random().toString(36).substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}`;\r\n      const apiUrl = `${window.location.origin}/api`;\r\n      \r\n      // Extract user information from the token\r\n      const userData: User = {\r\n        id: decodedPayload.sub,\r\n        name: decodedPayload.name || decodedPayload.email.split('@')[0],\r\n        email: decodedPayload.email,\r\n        credits: 4, // Start with 4 credits\r\n        apiKey: uniqueApiKey,\r\n        apiUrl: apiUrl,\r\n        isRecharged: false\r\n      };\r\n\r\n      // Save user data\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      setUser(userData);\r\n      \r\n      // Send welcome email with API credentials\r\n      sendCredentialsEmail(userData.email, uniqueApiKey, apiUrl);\r\n      \r\n      toast.success('Logged in successfully!');\r\n    } catch (error) {\r\n      console.error('Error parsing JWT token:', error);\r\n      // Fallback to mock data if token parsing fails\r\n      const mockUserData: User = {\r\n        id: '123456',\r\n        name: 'Test User',\r\n        email: 'test@example.com',\r\n        credits: 4,\r\n        apiKey: 'sample-api-key-for-testing',\r\n        apiUrl: `${window.location.origin}/api`,\r\n        isRecharged: false\r\n      };\r\n\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('user', JSON.stringify(mockUserData));\r\n      setUser(mockUserData);\r\n      toast.success('Logged in successfully!');\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    toast.info('Logged out successfully');\r\n  };\r\n\r\n  const refreshUser = () => {\r\n    // Mock implementation - in a real app this would fetch updated user data\r\n    if (user) {\r\n      const updatedUser = { ...user };\r\n      setUser(updatedUser);\r\n    }\r\n  };\r\n\r\n  const refreshCredits = () => {\r\n    // Mock implementation - in a real app this would refresh credits count\r\n    if (user) {\r\n      const updatedUser = { ...user, credits: 100 };\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      setUser(updatedUser);\r\n      toast.success('Credits refreshed successfully!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      user, \r\n      loading,\r\n      error,\r\n      isAuthenticated: !!user, \r\n      login, \r\n      logout,\r\n      refreshUser,\r\n      refreshCredits\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAmB,OAAO;AACxF,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAwBvC,MAAMC,WAAW,gBAAGP,aAAa,CAA8BQ,SAAS,CAAC;AAEzE,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACK,WAAW,CAAC;EACvC,IAAII,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAII,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAYpB,OAAO,MAAMI,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACzE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAgB,IAAI,CAAC;EAEvDE,SAAS,CAAC,MAAM;IACd;IACA,MAAMmB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAE7C,IAAIF,KAAK,IAAIG,QAAQ,EAAE;MACrB,IAAI;QACFR,OAAO,CAACS,IAAI,CAACC,KAAK,CAACF,QAAQ,CAAC,CAAC;MAC/B,CAAC,CAAC,OAAOL,KAAK,EAAE;QACdQ,OAAO,CAACR,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDG,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;QAChCN,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;MACjC;IACF;IAEAV,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMW,oBAAoB,GAAG,MAAAA,CAAOC,SAAiB,EAAEC,MAAc,EAAEC,MAAc,KAAK;IACxF,IAAI;MACF;MACA;MACA7B,KAAK,CAAC8B,IAAI,CAAC,0BAA0BH,SAAS,KAAK,CAAC;;MAEpD;MACA,MAAM,IAAII,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACAhC,KAAK,CAACkC,OAAO,CAAC,2BAA2BP,SAAS,EAAE,CAAC;MACrDH,OAAO,CAACW,GAAG,CAAC,8BAA8BR,SAAS,EAAE,CAAC;MACtDH,OAAO,CAACW,GAAG,CAAC,YAAYN,MAAM,EAAE,CAAC;MACjCL,OAAO,CAACW,GAAG,CAAC,YAAYP,MAAM,EAAE,CAAC;MACjCJ,OAAO,CAACW,GAAG,CAAC,oBAAoB,CAAC;;MAEjC;MACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;IACI,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdQ,OAAO,CAACR,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzDhB,KAAK,CAACgB,KAAK,CAAC,gFAAgF,CAAC;IAC/F;EACF,CAAC;EAED,MAAMoB,KAAK,GAAIlB,KAAa,IAAK;IAC/B,IAAI;MACF;MACA;MACA,MAAMmB,OAAO,GAAGnB,KAAK,CAACoB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACnC,MAAMC,cAAc,GAAGjB,IAAI,CAACC,KAAK,CAACiB,IAAI,CAACH,OAAO,CAAC,CAAC;;MAEhD;MACA,MAAMI,YAAY,GAAG,OAAOC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,IAAIH,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;MACxH,MAAMhB,MAAM,GAAG,GAAGiB,MAAM,CAACC,QAAQ,CAACC,MAAM,MAAM;;MAE9C;MACA,MAAM3B,QAAc,GAAG;QACrB4B,EAAE,EAAEV,cAAc,CAACW,GAAG;QACtBC,IAAI,EAAEZ,cAAc,CAACY,IAAI,IAAIZ,cAAc,CAACa,KAAK,CAACd,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC/Dc,KAAK,EAAEb,cAAc,CAACa,KAAK;QAC3BC,OAAO,EAAE,CAAC;QAAE;QACZzB,MAAM,EAAEa,YAAY;QACpBZ,MAAM,EAAEA,MAAM;QACdyB,WAAW,EAAE;MACf,CAAC;;MAED;MACAnC,YAAY,CAACoC,OAAO,CAAC,OAAO,EAAErC,KAAK,CAAC;MACpCC,YAAY,CAACoC,OAAO,CAAC,MAAM,EAAEjC,IAAI,CAACkC,SAAS,CAACnC,QAAQ,CAAC,CAAC;MACtDR,OAAO,CAACQ,QAAQ,CAAC;;MAEjB;MACAK,oBAAoB,CAACL,QAAQ,CAAC+B,KAAK,EAAEX,YAAY,EAAEZ,MAAM,CAAC;MAE1D7B,KAAK,CAACkC,OAAO,CAAC,yBAAyB,CAAC;IAC1C,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdQ,OAAO,CAACR,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD;MACA,MAAMyC,YAAkB,GAAG;QACzBR,EAAE,EAAE,QAAQ;QACZE,IAAI,EAAE,WAAW;QACjBC,KAAK,EAAE,kBAAkB;QACzBC,OAAO,EAAE,CAAC;QACVzB,MAAM,EAAE,4BAA4B;QACpCC,MAAM,EAAE,GAAGiB,MAAM,CAACC,QAAQ,CAACC,MAAM,MAAM;QACvCM,WAAW,EAAE;MACf,CAAC;MAEDnC,YAAY,CAACoC,OAAO,CAAC,OAAO,EAAErC,KAAK,CAAC;MACpCC,YAAY,CAACoC,OAAO,CAAC,MAAM,EAAEjC,IAAI,CAACkC,SAAS,CAACC,YAAY,CAAC,CAAC;MAC1D5C,OAAO,CAAC4C,YAAY,CAAC;MACrBzD,KAAK,CAACkC,OAAO,CAAC,yBAAyB,CAAC;IAC1C;EACF,CAAC;EAED,MAAMwB,MAAM,GAAGA,CAAA,KAAM;IACnBvC,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChCN,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;IAC/BZ,OAAO,CAAC,IAAI,CAAC;IACbb,KAAK,CAAC8B,IAAI,CAAC,yBAAyB,CAAC;EACvC,CAAC;EAED,MAAM6B,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA,IAAI/C,IAAI,EAAE;MACR,MAAMgD,WAAW,GAAG;QAAE,GAAGhD;MAAK,CAAC;MAC/BC,OAAO,CAAC+C,WAAW,CAAC;IACtB;EACF,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACA,IAAIjD,IAAI,EAAE;MACR,MAAMgD,WAAW,GAAG;QAAE,GAAGhD,IAAI;QAAEyC,OAAO,EAAE;MAAI,CAAC;MAC7ClC,YAAY,CAACoC,OAAO,CAAC,MAAM,EAAEjC,IAAI,CAACkC,SAAS,CAACI,WAAW,CAAC,CAAC;MACzD/C,OAAO,CAAC+C,WAAW,CAAC;MACpB5D,KAAK,CAACkC,OAAO,CAAC,iCAAiC,CAAC;IAClD;EACF,CAAC;EAED,oBACEhC,OAAA,CAACC,WAAW,CAAC2D,QAAQ;IAACC,KAAK,EAAE;MAC3BnD,IAAI;MACJE,OAAO;MACPE,KAAK;MACLgD,eAAe,EAAE,CAAC,CAACpD,IAAI;MACvBwB,KAAK;MACLsB,MAAM;MACNC,WAAW;MACXE;IACF,CAAE;IAAAnD,QAAA,EACCA;EAAQ;IAAAuD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACzD,GAAA,CAjJWF,YAAyC;AAAA4D,EAAA,GAAzC5D,YAAyC;AAmJtD,eAAeN,WAAW;AAAC,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}