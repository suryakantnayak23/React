{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Downloads\\\\form_pilot_assignment\\\\crud-platform\\\\client\\\\src\\\\context\\\\CrudContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { toast } from 'react-toastify';\nimport { useAuth } from './AuthContextFixed';\n\n// Define types for our data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CrudContext = /*#__PURE__*/createContext(undefined);\nexport const useCrud = () => {\n  _s();\n  const context = useContext(CrudContext);\n  if (context === undefined) {\n    throw new Error('useCrud must be used within a CrudProvider');\n  }\n  return context;\n};\n_s(useCrud, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const CrudProvider = ({\n  children\n}) => {\n  _s2();\n  const [forms, setForms] = useState([]);\n  const [submissions, setSubmissions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useAuth();\n\n  // This would normally connect to a real API\n  const fetchForms = async () => {\n    setLoading(true);\n    try {\n      // Mock API call for example\n      const mockForms = [{\n        id: '1',\n        title: 'Contact Form',\n        description: 'Basic contact form with name, email, and message',\n        fields: [{\n          id: '1',\n          name: 'name',\n          type: 'text',\n          required: true\n        }, {\n          id: '2',\n          name: 'email',\n          type: 'email',\n          required: true\n        }, {\n          id: '3',\n          name: 'message',\n          type: 'textarea',\n          required: true\n        }],\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      }];\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      setForms(mockForms);\n      setError(null);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch forms');\n      toast.error('Failed to fetch forms');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchSubmissions = async formId => {\n    setLoading(true);\n    try {\n      // Mock API call for example\n      const mockSubmissions = [{\n        id: '1',\n        formId,\n        data: {\n          name: 'John Doe',\n          email: 'john@example.com',\n          message: 'Hello there!'\n        },\n        createdAt: new Date().toISOString()\n      }];\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      setSubmissions(mockSubmissions);\n      setError(null);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch submissions');\n      toast.error('Failed to fetch submissions');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createForm = async formData => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      const newForm = {\n        ...formData,\n        id: Date.now().toString(),\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      setForms(prevForms => [...prevForms, newForm]);\n      toast.success('Form created successfully!');\n    } catch (err) {\n      setError(err.message || 'Failed to create form');\n      toast.error('Failed to create form');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateForm = async (id, formData) => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      setForms(prevForms => prevForms.map(form => form.id === id ? {\n        ...form,\n        ...formData,\n        updatedAt: new Date().toISOString()\n      } : form));\n      toast.success('Form updated successfully!');\n    } catch (err) {\n      setError(err.message || 'Failed to update form');\n      toast.error('Failed to update form');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteForm = async id => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      setForms(prevForms => prevForms.filter(form => form.id !== id));\n      toast.success('Form deleted successfully!');\n    } catch (err) {\n      setError(err.message || 'Failed to delete form');\n      toast.error('Failed to delete form');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CrudContext.Provider, {\n    value: {\n      forms,\n      submissions,\n      loading,\n      error,\n      createForm,\n      updateForm,\n      deleteForm,\n      fetchForms,\n      fetchSubmissions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n_s2(CrudProvider, \"C1HJ2jyLpExS77Db56kjCNmIh4c=\", false, function () {\n  return [useAuth];\n});\n_c = CrudProvider;\nexport default CrudContext;\nvar _c;\n$RefreshReg$(_c, \"CrudProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","toast","useAuth","jsxDEV","_jsxDEV","CrudContext","undefined","useCrud","_s","context","Error","CrudProvider","children","_s2","forms","setForms","submissions","setSubmissions","loading","setLoading","error","setError","user","fetchForms","mockForms","id","title","description","fields","name","type","required","createdAt","Date","toISOString","updatedAt","Promise","resolve","setTimeout","err","message","fetchSubmissions","formId","mockSubmissions","data","email","createForm","formData","newForm","now","toString","prevForms","success","updateForm","map","form","deleteForm","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Downloads/form_pilot_assignment/crud-platform/client/src/context/CrudContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { useAuth } from './AuthContextFixed';\r\n\r\n// Define types for our data\r\ninterface FormData {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  fields: Field[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\ninterface Field {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  required: boolean;\r\n  options?: string[];\r\n}\r\n\r\ninterface FormSubmission {\r\n  id: string;\r\n  formId: string;\r\n  data: Record<string, any>;\r\n  createdAt: string;\r\n}\r\n\r\ninterface CrudContextType {\r\n  forms: FormData[];\r\n  submissions: FormSubmission[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  createForm: (formData: Omit<FormData, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;\r\n  updateForm: (id: string, formData: Partial<FormData>) => Promise<void>;\r\n  deleteForm: (id: string) => Promise<void>;\r\n  fetchForms: () => Promise<void>;\r\n  fetchSubmissions: (formId: string) => Promise<void>;\r\n}\r\n\r\nconst CrudContext = createContext<CrudContextType | undefined>(undefined);\r\n\r\nexport const useCrud = () => {\r\n  const context = useContext(CrudContext);\r\n  if (context === undefined) {\r\n    throw new Error('useCrud must be used within a CrudProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface CrudProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const CrudProvider: React.FC<CrudProviderProps> = ({ children }) => {\r\n  const [forms, setForms] = useState<FormData[]>([]);\r\n  const [submissions, setSubmissions] = useState<FormSubmission[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { user } = useAuth();\r\n\r\n  // This would normally connect to a real API\r\n  const fetchForms = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Mock API call for example\r\n      const mockForms: FormData[] = [\r\n        {\r\n          id: '1',\r\n          title: 'Contact Form',\r\n          description: 'Basic contact form with name, email, and message',\r\n          fields: [\r\n            { id: '1', name: 'name', type: 'text', required: true },\r\n            { id: '2', name: 'email', type: 'email', required: true },\r\n            { id: '3', name: 'message', type: 'textarea', required: true }\r\n          ],\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        }\r\n      ];\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n      \r\n      setForms(mockForms);\r\n      setError(null);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to fetch forms');\r\n      toast.error('Failed to fetch forms');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchSubmissions = async (formId: string) => {\r\n    setLoading(true);\r\n    try {\r\n      // Mock API call for example\r\n      const mockSubmissions: FormSubmission[] = [\r\n        {\r\n          id: '1',\r\n          formId,\r\n          data: {\r\n            name: 'John Doe',\r\n            email: 'john@example.com',\r\n            message: 'Hello there!'\r\n          },\r\n          createdAt: new Date().toISOString()\r\n        }\r\n      ];\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n      \r\n      setSubmissions(mockSubmissions);\r\n      setError(null);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to fetch submissions');\r\n      toast.error('Failed to fetch submissions');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createForm = async (formData: Omit<FormData, 'id' | 'createdAt' | 'updatedAt'>) => {\r\n    setLoading(true);\r\n    try {\r\n      // In a real app, this would be an API call\r\n      const newForm: FormData = {\r\n        ...formData,\r\n        id: Date.now().toString(),\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n      \r\n      setForms(prevForms => [...prevForms, newForm]);\r\n      toast.success('Form created successfully!');\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to create form');\r\n      toast.error('Failed to create form');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateForm = async (id: string, formData: Partial<FormData>) => {\r\n    setLoading(true);\r\n    try {\r\n      // In a real app, this would be an API call\r\n      setForms(prevForms => \r\n        prevForms.map(form => \r\n          form.id === id ? { \r\n            ...form, \r\n            ...formData, \r\n            updatedAt: new Date().toISOString() \r\n          } : form\r\n        )\r\n      );\r\n      \r\n      toast.success('Form updated successfully!');\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to update form');\r\n      toast.error('Failed to update form');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteForm = async (id: string) => {\r\n    setLoading(true);\r\n    try {\r\n      // In a real app, this would be an API call\r\n      setForms(prevForms => prevForms.filter(form => form.id !== id));\r\n      toast.success('Form deleted successfully!');\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to delete form');\r\n      toast.error('Failed to delete form');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CrudContext.Provider\r\n      value={{\r\n        forms,\r\n        submissions,\r\n        loading,\r\n        error,\r\n        createForm,\r\n        updateForm,\r\n        deleteForm,\r\n        fetchForms,\r\n        fetchSubmissions\r\n      }}\r\n    >\r\n      {children}\r\n    </CrudContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CrudContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}