{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Downloads\\\\form_pilot_assignment\\\\crud-platform\\\\client\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (token && userData) {\n      try {\n        setUser(JSON.parse(userData));\n      } catch (error) {\n        console.error('Failed to parse user data:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Send API credentials to user's email - immediately after signup\n  const sendCredentialsEmail = async (userEmail, apiKey, apiUrl, userName) => {\n    try {\n      // Create mailto link\n      const formattedDate = new Date().toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n\n      // Email subject and body\n      const subject = `Your CRUD API Credentials (${formattedDate})`;\n      const body = `Dear ${userName},\n\nHere are your CRUD API credentials:\n\nAPI URL: ${apiUrl}\nAPI Key: ${apiKey}\nInitial Credits: 4\n\nThank you for using our service!\n\nRegards,\nCRUD API Platform Team`;\n\n      // In a real app, this would be an API call to your backend\n      toast.info(`Sending credentials to ${userEmail}...`);\n\n      // Log credentials for development purposes\n      console.log(\"----------- CREDENTIALS SENT BY EMAIL -----------\");\n      console.log(`Email sent to: ${userEmail}`);\n      console.log(`API URL: ${apiUrl}`);\n      console.log(`API Key: ${apiKey}`);\n      console.log(`Initial Credits: 4`);\n      console.log(\"--------------------------------------------------\");\n\n      // Simulate delay for email sending\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Automatically open the user's email client with the credentials\n      // This is a workaround since we can't send real emails from the client\n      const mailtoLink = `mailto:${userEmail}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n      window.open(mailtoLink, '_blank');\n      toast.success(`API credentials sent to your email: ${userEmail}`);\n    } catch (error) {\n      console.error('Failed to send credentials email:', error);\n      toast.error('Failed to send credentials email. Please check your dashboard for API details.');\n    }\n  };\n  const login = token => {\n    try {\n      // Decode the Google JWT token to get user info\n      // JWT tokens are in format: header.payload.signature\n      const payload = token.split('.')[1];\n      const decodedPayload = JSON.parse(atob(payload));\n\n      // Generate a unique API key\n      const uniqueApiKey = `key_${Math.random().toString(36).substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}`;\n      const apiUrl = `${window.location.origin}/api`;\n\n      // Extract user information from the token\n      const userData = {\n        id: decodedPayload.sub,\n        name: decodedPayload.name || decodedPayload.email.split('@')[0],\n        email: decodedPayload.email,\n        credits: 4,\n        // Start with 4 credits\n        apiKey: uniqueApiKey,\n        apiUrl: apiUrl,\n        isRecharged: false\n      };\n\n      // Save user data\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(userData));\n      setUser(userData);\n\n      // Send credentials email automatically\n      sendCredentialsEmail(userData.email, uniqueApiKey, apiUrl, userData.name);\n      toast.success('Logged in successfully!');\n    } catch (error) {\n      console.error('Error parsing JWT token:', error);\n      // Fallback to mock data if token parsing fails\n      const mockUserData = {\n        id: '123456',\n        name: 'Test User',\n        email: 'test@example.com',\n        credits: 4,\n        apiKey: 'sample-api-key-for-testing',\n        apiUrl: `${window.location.origin}/api`,\n        isRecharged: false\n      };\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(mockUserData));\n      setUser(mockUserData);\n      toast.success('Logged in successfully!');\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    toast.info('Logged out successfully');\n\n    // Force navigate to home page\n    window.location.href = '/';\n  };\n  const refreshUser = () => {\n    // Mock implementation - in a real app this would fetch updated user data\n    if (user) {\n      const updatedUser = {\n        ...user\n      };\n      setUser(updatedUser);\n    }\n  };\n  const refreshCredits = () => {\n    // Mock implementation - in a real app this would refresh credits count\n    if (user) {\n      const updatedUser = {\n        ...user,\n        credits: 100\n      };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      setUser(updatedUser);\n      toast.success('Credits refreshed successfully!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      error,\n      isAuthenticated: !!user,\n      login,\n      logout,\n      refreshUser,\n      refreshCredits\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","toast","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","token","localStorage","getItem","userData","JSON","parse","console","removeItem","sendCredentialsEmail","userEmail","apiKey","apiUrl","userName","formattedDate","Date","toLocaleDateString","year","month","day","subject","body","info","log","Promise","resolve","setTimeout","mailtoLink","encodeURIComponent","window","open","success","login","payload","split","decodedPayload","atob","uniqueApiKey","Math","random","toString","substring","location","origin","id","sub","name","email","credits","isRecharged","setItem","stringify","mockUserData","logout","href","refreshUser","updatedUser","refreshCredits","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Downloads/form_pilot_assignment/crud-platform/client/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport axios from 'axios';\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  credits: number;\r\n  apiKey: string;\r\n  apiUrl: string;\r\n  isRecharged: boolean;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  isAuthenticated: boolean;\r\n  login: (token: string) => void;\r\n  logout: () => void;\r\n  refreshUser: () => void;\r\n  refreshCredits: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in from localStorage\r\n    const token = localStorage.getItem('token');\r\n    const userData = localStorage.getItem('user');\r\n    \r\n    if (token && userData) {\r\n      try {\r\n        setUser(JSON.parse(userData));\r\n      } catch (error) {\r\n        console.error('Failed to parse user data:', error);\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    \r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Send API credentials to user's email - immediately after signup\r\n  const sendCredentialsEmail = async (userEmail: string, apiKey: string, apiUrl: string, userName: string) => {\r\n    try {\r\n      // Create mailto link\r\n      const formattedDate = new Date().toLocaleDateString('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric'\r\n      });\r\n      \r\n      // Email subject and body\r\n      const subject = `Your CRUD API Credentials (${formattedDate})`;\r\n      const body = `Dear ${userName},\r\n\r\nHere are your CRUD API credentials:\r\n\r\nAPI URL: ${apiUrl}\r\nAPI Key: ${apiKey}\r\nInitial Credits: 4\r\n\r\nThank you for using our service!\r\n\r\nRegards,\r\nCRUD API Platform Team`;\r\n\r\n      // In a real app, this would be an API call to your backend\r\n      toast.info(`Sending credentials to ${userEmail}...`);\r\n      \r\n      // Log credentials for development purposes\r\n      console.log(\"----------- CREDENTIALS SENT BY EMAIL -----------\");\r\n      console.log(`Email sent to: ${userEmail}`);\r\n      console.log(`API URL: ${apiUrl}`);\r\n      console.log(`API Key: ${apiKey}`);\r\n      console.log(`Initial Credits: 4`);\r\n      console.log(\"--------------------------------------------------\");\r\n      \r\n      // Simulate delay for email sending\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      // Automatically open the user's email client with the credentials\r\n      // This is a workaround since we can't send real emails from the client\r\n      const mailtoLink = `mailto:${userEmail}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\r\n      window.open(mailtoLink, '_blank');\r\n      \r\n      toast.success(`API credentials sent to your email: ${userEmail}`);\r\n    } catch (error) {\r\n      console.error('Failed to send credentials email:', error);\r\n      toast.error('Failed to send credentials email. Please check your dashboard for API details.');\r\n    }\r\n  };\r\n\r\n  const login = (token: string) => {\r\n    try {\r\n      // Decode the Google JWT token to get user info\r\n      // JWT tokens are in format: header.payload.signature\r\n      const payload = token.split('.')[1];\r\n      const decodedPayload = JSON.parse(atob(payload));\r\n      \r\n      // Generate a unique API key\r\n      const uniqueApiKey = `key_${Math.random().toString(36).substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}`;\r\n      const apiUrl = `${window.location.origin}/api`;\r\n      \r\n      // Extract user information from the token\r\n      const userData: User = {\r\n        id: decodedPayload.sub,\r\n        name: decodedPayload.name || decodedPayload.email.split('@')[0],\r\n        email: decodedPayload.email,\r\n        credits: 4, // Start with 4 credits\r\n        apiKey: uniqueApiKey,\r\n        apiUrl: apiUrl,\r\n        isRecharged: false\r\n      };\r\n\r\n      // Save user data\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      setUser(userData);\r\n      \r\n      // Send credentials email automatically\r\n      sendCredentialsEmail(userData.email, uniqueApiKey, apiUrl, userData.name);\r\n      \r\n      toast.success('Logged in successfully!');\r\n    } catch (error) {\r\n      console.error('Error parsing JWT token:', error);\r\n      // Fallback to mock data if token parsing fails\r\n      const mockUserData: User = {\r\n        id: '123456',\r\n        name: 'Test User',\r\n        email: 'test@example.com',\r\n        credits: 4,\r\n        apiKey: 'sample-api-key-for-testing',\r\n        apiUrl: `${window.location.origin}/api`,\r\n        isRecharged: false\r\n      };\r\n\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('user', JSON.stringify(mockUserData));\r\n      setUser(mockUserData);\r\n      toast.success('Logged in successfully!');\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    toast.info('Logged out successfully');\r\n    \r\n    // Force navigate to home page\r\n    window.location.href = '/';\r\n  };\r\n\r\n  const refreshUser = () => {\r\n    // Mock implementation - in a real app this would fetch updated user data\r\n    if (user) {\r\n      const updatedUser = { ...user };\r\n      setUser(updatedUser);\r\n    }\r\n  };\r\n\r\n  const refreshCredits = () => {\r\n    // Mock implementation - in a real app this would refresh credits count\r\n    if (user) {\r\n      const updatedUser = { ...user, credits: 100 };\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      setUser(updatedUser);\r\n      toast.success('Credits refreshed successfully!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      user, \r\n      loading,\r\n      error,\r\n      isAuthenticated: !!user, \r\n      login, \r\n      logout,\r\n      refreshUser,\r\n      refreshCredits\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}