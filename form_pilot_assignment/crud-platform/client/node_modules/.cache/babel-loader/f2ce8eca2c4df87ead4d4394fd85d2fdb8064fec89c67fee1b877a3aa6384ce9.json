{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Downloads\\\\form_pilot_assignment\\\\crud-platform\\\\client\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport CrudLibrary from 'your-formpilot-crud';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (token && userData) {\n      try {\n        setUser(JSON.parse(userData));\n      } catch (error) {\n        console.error('Failed to parse user data:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Display only login success/failure in toast notifications\n  const sendCredentialsEmail = async (userEmail, apiKey, apiUrl, userName) => {\n    try {\n      // Log credentials for development purposes only (not shown to user)\n      console.log(\"----------- YOUR API CREDENTIALS (for development only) -----------\");\n      console.log(`Email: ${userEmail}`);\n      console.log(`API URL: ${apiUrl}`);\n      console.log(`API Key: ${apiKey}`);\n      console.log(`Initial Credits: 4`);\n      console.log(\"-------------------------------------------\");\n\n      // No toast notifications for credentials\n    } catch (error) {\n      console.error('Failed to process credentials:', error);\n    }\n  };\n  const login = async token => {\n    try {\n      // Decode the Google JWT token to get user info\n      // JWT tokens are in format: header.payload.signature\n      const payload = token.split('.')[1];\n      const decodedPayload = JSON.parse(atob(payload));\n\n      // Generate a unique API key\n      const uniqueApiKey = `key_${Math.random().toString(36).substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}`;\n      const apiUrl = `${window.location.origin}/api`;\n\n      // Extract user information from the token\n      const userData = {\n        id: decodedPayload.sub,\n        name: decodedPayload.name || decodedPayload.email.split('@')[0],\n        email: decodedPayload.email,\n        credits: 4,\n        // Start with 4 credits\n        apiKey: uniqueApiKey,\n        apiUrl: apiUrl,\n        isRecharged: false\n      };\n\n      // Save user data\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(userData));\n      setUser(userData);\n\n      // Store credentials in localStorage but don't show in toast\n      sendCredentialsEmail(userData.email, uniqueApiKey, apiUrl, userData.name);\n      toast.success('Logged in successfully!');\n\n      // Create a sample item to demonstrate the library\n      try {\n        // Use directly after user logs in - using a setTimeout to avoid blocking\n        setTimeout(() => {\n          // Cast to any to avoid TypeScript errors as we know the structure\n          const createFn = CrudLibrary.create;\n          if (typeof createFn === 'function') {\n            createFn({\n              value: 0.5,\n              txHash: \"123\"\n            }).then(result => {\n              console.log(\"Created test item:\", result);\n            }).catch(err => {\n              console.error(\"Error in test item promise:\", err);\n            });\n          }\n        }, 500);\n      } catch (e) {\n        console.error(\"Error setting up test item creation:\", e);\n      }\n    } catch (error) {\n      console.error('Error parsing JWT token:', error);\n      toast.error('Login failed. Please try again.');\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    toast.info('Logged out successfully');\n\n    // Force navigate to home page\n    window.location.href = '/';\n  };\n  const refreshUser = () => {\n    // Mock implementation - in a real app this would fetch updated user data\n    if (user) {\n      const updatedUser = {\n        ...user\n      };\n      setUser(updatedUser);\n    }\n  };\n  const refreshCredits = () => {\n    // Mock implementation - in a real app this would refresh credits count\n    if (user) {\n      const updatedUser = {\n        ...user,\n        credits: 100\n      };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      setUser(updatedUser);\n      toast.success('Credits refreshed successfully!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      error,\n      isAuthenticated: !!user,\n      login,\n      logout,\n      refreshUser,\n      refreshCredits\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","toast","CrudLibrary","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","token","localStorage","getItem","userData","JSON","parse","console","removeItem","sendCredentialsEmail","userEmail","apiKey","apiUrl","userName","log","login","payload","split","decodedPayload","atob","uniqueApiKey","Math","random","toString","substring","window","location","origin","id","sub","name","email","credits","isRecharged","setItem","stringify","success","setTimeout","createFn","create","value","txHash","then","result","catch","err","e","logout","info","href","refreshUser","updatedUser","refreshCredits","Provider","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Downloads/form_pilot_assignment/crud-platform/client/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport CrudLibrary from 'your-formpilot-crud';\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  credits: number;\r\n  apiKey: string;\r\n  apiUrl: string;\r\n  isRecharged: boolean;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  isAuthenticated: boolean;\r\n  login: (token: string) => void;\r\n  logout: () => void;\r\n  refreshUser: () => void;\r\n  refreshCredits: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in from localStorage\r\n    const token = localStorage.getItem('token');\r\n    const userData = localStorage.getItem('user');\r\n    \r\n    if (token && userData) {\r\n      try {\r\n        setUser(JSON.parse(userData));\r\n      } catch (error) {\r\n        console.error('Failed to parse user data:', error);\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    \r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Display only login success/failure in toast notifications\r\n  const sendCredentialsEmail = async (userEmail: string, apiKey: string, apiUrl: string, userName: string) => {\r\n    try {\r\n      // Log credentials for development purposes only (not shown to user)\r\n      console.log(\"----------- YOUR API CREDENTIALS (for development only) -----------\");\r\n      console.log(`Email: ${userEmail}`);\r\n      console.log(`API URL: ${apiUrl}`);\r\n      console.log(`API Key: ${apiKey}`);\r\n      console.log(`Initial Credits: 4`);\r\n      console.log(\"-------------------------------------------\");\r\n      \r\n      // No toast notifications for credentials\r\n    } catch (error) {\r\n      console.error('Failed to process credentials:', error);\r\n    }\r\n  };\r\n\r\n  const login = async (token: string) => {\r\n    try {\r\n      // Decode the Google JWT token to get user info\r\n      // JWT tokens are in format: header.payload.signature\r\n      const payload = token.split('.')[1];\r\n      const decodedPayload = JSON.parse(atob(payload));\r\n      \r\n      // Generate a unique API key\r\n      const uniqueApiKey = `key_${Math.random().toString(36).substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}`;\r\n      const apiUrl = `${window.location.origin}/api`;\r\n      \r\n      // Extract user information from the token\r\n      const userData: User = {\r\n        id: decodedPayload.sub,\r\n        name: decodedPayload.name || decodedPayload.email.split('@')[0],\r\n        email: decodedPayload.email,\r\n        credits: 4, // Start with 4 credits\r\n        apiKey: uniqueApiKey,\r\n        apiUrl: apiUrl,\r\n        isRecharged: false\r\n      };\r\n\r\n      // Save user data\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      setUser(userData);\r\n      \r\n      // Store credentials in localStorage but don't show in toast\r\n      sendCredentialsEmail(userData.email, uniqueApiKey, apiUrl, userData.name);\r\n      \r\n      toast.success('Logged in successfully!');\r\n\r\n      // Create a sample item to demonstrate the library\r\n      try {\r\n        // Use directly after user logs in - using a setTimeout to avoid blocking\r\n        setTimeout(() => {\r\n          // Cast to any to avoid TypeScript errors as we know the structure\r\n          const createFn = (CrudLibrary as any).create;\r\n          if (typeof createFn === 'function') {\r\n            createFn({ value: 0.5, txHash: \"123\" })\r\n              .then((result: any) => {\r\n                console.log(\"Created test item:\", result);\r\n              })\r\n              .catch((err: Error) => {\r\n                console.error(\"Error in test item promise:\", err);\r\n              });\r\n          }\r\n        }, 500);\r\n      } catch (e) {\r\n        console.error(\"Error setting up test item creation:\", e);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error parsing JWT token:', error);\r\n      toast.error('Login failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    toast.info('Logged out successfully');\r\n    \r\n    // Force navigate to home page\r\n    window.location.href = '/';\r\n  };\r\n\r\n  const refreshUser = () => {\r\n    // Mock implementation - in a real app this would fetch updated user data\r\n    if (user) {\r\n      const updatedUser = { ...user };\r\n      setUser(updatedUser);\r\n    }\r\n  };\r\n\r\n  const refreshCredits = () => {\r\n    // Mock implementation - in a real app this would refresh credits count\r\n    if (user) {\r\n      const updatedUser = { ...user, credits: 100 };\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      setUser(updatedUser);\r\n      toast.success('Credits refreshed successfully!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      user, \r\n      loading,\r\n      error,\r\n      isAuthenticated: !!user, \r\n      login, \r\n      logout,\r\n      refreshUser,\r\n      refreshCredits\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}